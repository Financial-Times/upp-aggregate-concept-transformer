apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ .Values.service.name }} 
  labels:
    chart: "{{ .Chart.Name | trunc 63 }}"
    chartVersion: "{{ .Chart.Version | trunc 63 }}" 
    visualize: "true" 
    app: {{ .Values.service.name }} 
spec:
  replicas: {{ .Values.replicaCount }}
  selector: 
    matchLabels:
      app: {{ .Values.service.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.service.name }}
        visualize: "true" 
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - {{ .Values.service.name }}
            topologyKey: "kubernetes.io/hostname"
      terminationGracePeriodSeconds: {{ .Values.waitTime | mul 2 }}
      containers: 
      - name: {{ .Values.service.name }} 
        image: "{{ .Values.image.repository }}:{{ .Chart.Version }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: SQS_REGION
          valueFrom:
            configMapKeyRef:
              name: global-config
              key: aws.region
        - name: NEO_WRITER_ADDRESS 
          value: "http://concepts-rw-neo4j:8080"
        - name: ES_WRITER_ADDRESS 
          value: "http://concept-rw-elasticsearch:8080"
        - name: VARNISH_PURGER_ADDRESS
          value: "http://varnish-purger:8080"
        - name: CONCORDANCES_RW_ADDRESS 
          value: "{{ .Values.concordances.address }}"
        - name: MAX_MESSAGES 
          value: "10"
        - name: VISIBILITY_TIMEOUT
          value: "30"
        - name: WAIT_TIME
          value: "{{ .Values.waitTime }}"
        - name: HTTP_TIMEOUT
          value: "{{ .Values.httpTimeout }}"
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: global-secrets
              key: aws.access_key_id
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: global-secrets
              key: aws.secret_access_key
        - name: BUCKET_NAME
          valueFrom:
            secretKeyRef:
              name: global-secrets
              key: concepts.s3_bucket
        - name: CONCEPTS_QUEUE_URL
          valueFrom:
            secretKeyRef:
              name: global-secrets
              key: concepts.updates_sqs_url
        - name: EVENTS_QUEUE_URL
          valueFrom:
            secretKeyRef:
              name: global-secrets
              key: concepts.events_sqs_url
              optional: true
        - name: KINESIS_STREAM_NAME
          valueFrom:
            secretKeyRef:
              name: global-secrets
              key: concepts.kinesis_stream
        - name: KINESIS_REGION
          valueFrom:
            secretKeyRef:
              name: global-secrets
              key: concepts.kinesis_region
        - name: CROSS_ACCOUNT_ARN
          valueFrom:
            secretKeyRef:
              name: global-secrets
              key: iam.cross_account_arn
        ports: 
        - containerPort: 8080
        livenessProbe: 
          tcpSocket: 
            port: 8080
          initialDelaySeconds: 10 
        readinessProbe: 
          httpGet: 
            path: "/__gtg" 
            port: 8080
          initialDelaySeconds: 15 
          periodSeconds: 30 
        resources: 
{{ toYaml .Values.resources | indent 12 }}

